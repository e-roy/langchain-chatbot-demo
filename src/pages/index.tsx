import Head from "next/head";
import { useState } from "react";
import ReactMarkdown from "react-markdown";
import * as timeago from "timeago.js";
import {
  MainContainer,
  ChatContainer,
  MessageList,
  Message,
  MessageInput,
  ConversationHeader,
  TypingIndicator,
} from "@chatscope/chat-ui-kit-react";

import styles from "@chatscope/chat-ui-kit-styles/dist/default/styles.min.css";

interface IMessage {
  role: Role;
  content: string;
  date: Date;
}
type Role = "assistant" | "user" | "system";

export default function Home() {
  const [text, setText] = useState("");
  const [chatMessages, setChatMessages] = useState<IMessage[]>([]);
  const [loading, setLoading] = useState(false);

  const [crawlUrl, setCrawlUrl] = useState("");
  const [activeUrl, setActiveUrl] = useState("Enter a URL to crawl");

  const handleCrawl = async () => {
    try {
      await fetch(
        `/api/crawl?urls=${crawlUrl}&limit=10&indexName=yourIndexName`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        }
      );

      setActiveUrl(crawlUrl);
    } catch (error) {
      console.error("Error submitting message:", error);
      setActiveUrl("ERROR");
    }
  };

  const handleChainStream = async (content: string) => {
    setLoading(true);

    const allMessages: IMessage[] = [...chatMessages];

    allMessages.push({ role: "user", content: content, date: new Date() });

    if (process.env.NODE_ENV === "development")
      console.log("allMesages", allMessages);

    setChatMessages(allMessages);

    try {
      const response = await fetch("/api/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          messages: allMessages,
        }),
      });

      console.log("Edge function returned.");

      if (!response.ok) {
        throw new Error(response.statusText);
      }

      // This data is a ReadableStream
      const data = response.body;
      if (!data) {
        return;
      }

      const reader = data.getReader();
      const decoder = new TextDecoder();
      let done = false;

      let lastMessage = "";

      while (!done) {
        const { value, done: doneReading } = await reader.read();
        done = doneReading;
        const chunkValue = decoder.decode(value);

        lastMessage = lastMessage + chunkValue;

        setChatMessages([
          ...allMessages,
          { role: "assistant", content: lastMessage, date: new Date() },
        ]);
        setLoading(false);
      }
    } catch (err) {
      console.log(err);
      setLoading(false);
    }
  };

  return (
    <>
      <Head>
        <title>Chroma Chatbot</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        {process.env.NODE_ENV === "development" && (
          <div
            style={{
              display: "flex",
              padding: "0.75rem",
            }}
          >
            <input
              type="text"
              style={{
                width: "70%",
                padding: "0.5rem",
              }}
              value={crawlUrl}
              onChange={(e) => setCrawlUrl(e.target.value)}
            />
            <button
              style={{ marginLeft: "2rem" }}
              onClick={() => handleCrawl()}
            >
              Crawl
            </button>
          </div>
        )}
        <div
          style={{ position: "relative", height: "90vh", overflow: "hidden" }}
        >
          <MainContainer>
            <ChatContainer>
              <ConversationHeader>
                <ConversationHeader.Actions></ConversationHeader.Actions>
                <ConversationHeader.Content
                  userName={`Chroma Chatbot URL - ${activeUrl}`}
                  info={``}
                />
              </ConversationHeader>

              <MessageList
                typingIndicator={
                  loading ? <TypingIndicator content="thinking..." /> : null
                }
              >
                {chatMessages.map((entry, index) => {
                  return (
                    <Message
                      key={index}
                      style={{ width: "90%" }}
                      model={{
                        type: "custom",
                        sender: entry.role,
                        position: "single",
                        direction:
                          entry.role === "assistant" ? "incoming" : "outgoing",
                      }}
                    >
                      <Message.CustomContent>
                        <ReactMarkdown
                          components={{
                            pre: ({ node, ...props }) => (
                              <pre
                                style={{
                                  backgroundColor: "#2B2B2B",
                                  color: "#fff",
                                  padding: "0.5rem",
                                  borderRadius: "0.5rem",
                                }}
                                {...props}
                              />
                            ),
                          }}
                        >
                          {entry.content}
                        </ReactMarkdown>
                      </Message.CustomContent>
                      <Message.Footer
                        sentTime={timeago.format(entry.date)}
                        sender={
                          entry.role === "assistant" ? "Assistant" : "You"
                        }
                      />
                    </Message>
                  );
                })}
              </MessageList>
              <MessageInput
                placeholder="Type message here"
                onSend={() => handleChainStream(text)}
                onChange={(e, text) => {
                  setText(text);
                }}
                sendButton={true}
                autoFocus
                disabled={loading}
              />
            </ChatContainer>
          </MainContainer>
        </div>
      </main>
    </>
  );
}
